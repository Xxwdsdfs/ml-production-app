name: CI/CD Workflow

on:
  pull_request:
    branches:
      - dev
  push:
    branches:
      - dev
      - staging
      - main

permissions:
  contents: write


jobs:
  pull_request:
    if: github.event_name == 'pull_request'
    name: Build and Test on Pull Request to Dev
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build the app
        run: |
          echo "Building the app..."
          # Add build steps if necessary

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          pytest tests/integration

  push_to_staging:
    if: github.ref == 'refs/heads/dev'
    name: Push to Staging Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Push to staging branch
        run: |
          git config --global user.email "axelbenoist@orange.fr"
          git config --global user.name "Axel Benoist"
          git fetch origin +refs/heads/*:refs/remotes/origin/*  # Récupère toutes les branches distantes
          if git rev-parse --verify origin/staging; then
            git checkout staging
            git pull origin staging
          else
            git checkout -b staging
          fi
          git merge dev --allow-unrelated-histories  # Ajout de l'option pour fusionner sans historique commun
          git push origin staging



  staging_tests:
    if: github.ref == 'refs/heads/staging'
    name: Build and Test on Staging
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build the app
        run: |
          echo "Building the app..."
          # Add build steps if necessary

      - name: Run all tests
        run: |
          echo "Running all tests..."
          pytest

      - name: Push to production branch
        run: |
          git config --global user.email "mouhamadou.gueye @efrei.net"
          git config --global user.name "acbbiste17"
          git checkout main
          git merge staging
          git push origin main

  production_deploy:
    if: github.ref == 'refs/heads/main'
    name: Deploy to Production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker images
        run: |
          docker build -t your-dockerhub-username/ml-production-app .

      - name: Push Docker images to DockerHub
        run: |
          echo "Rep@ison23" | docker login -u "mouhamadou.gueye@efrei.net" --password-stdin
          docker push your-dockerhub-username/ml-production-app

      - name: Deploy to Production
        run: |
          echo "Deploying to production..."
          # Add deployment steps here
